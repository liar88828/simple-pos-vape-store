// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    // output   = "../lib/generated/prisma"
    output   = "../node_modules/.prisma/client"
}

generator zod {
    provider                         = "zod-prisma-types"
    output = "../lib/validation"
    // output                           = "./generated/zod_types" // default is ./generated/zod
    useMultipleFiles                 = true // default is false
    // writeBarrelFiles                 = false // default is true
    createInputTypes                 = false // default is true
    // createModelTypes                 = false // default is true
    addInputTypeValidation           = false // default is true
    addIncludeType                   = false // default is true
    addSelectType                    = false // default is true
    validateWhereUniqueInput         = false // default is true
    createOptionalDefaultValuesTypes = true // default is false
    createRelationValuesTypes        = true // default is false
    createPartialTypes               = true // default is false
    // useDefaultValidators             = false // default is true
    coerceDate                       = false // default is true
    writeNullishInModelTypes         = true // default is false
    // prismaClientPath                 = "./path/to/prisma/client" // default is client output path
}

// generator zod {
//     provider = "zod-prisma"
//     output   = "../lib/generated/zod"
//
//     relationModel = true // (default) Create and export both plain and related models.
//     // relationModel         = "default" // Do not export model without relations.
//     // relationModel         = false // Do not generate related model
//
//     modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//     // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)
//
//     modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas
//
//     // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//     useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
//
//     // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable
//
//     // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//     prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
//     // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Product {
    id         String  @id @default(uuid())
    category       String /// @zod.string.min(1)
    name           String /// @zod.string.min(1)
    price          Int /// @zod.number.min(1)
    stock      Int     @default(0) /// @zod.number.min(0)
    minStock       Int         @default(5)
    sold           Int         @default(0)
    image          String /// @zod.string.min(1)
    brand          String? /// @zod.string.min(1)
    type           String /// @zod.string.min(1)
    description    String /// @zod.string.min(1)
    nicotineLevel  String? // nullable
    fluidLevel String? // nullable
    flavor         String? // nullable
    cottonSize     String?
    batterySize    String?
    resistanceSize String?
    coilSize       String?
    PreOrders      PreOrder[]
    SalesItems     SalesItem[]
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
}

model Customer {
    id String @id @default(uuid())
    name          String /// @zod.string.min(1)
    age           Int      @default(0) /// @zod.number.max(80)
    totalPurchase Int      @default(0) /// @zod.number.min(0)
    status        String   @default("Pending") /// @zod.string.min(1)
    lastPurchase  DateTime
    // PreOrders PreOrder[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Sales  Sale[]
    User   User   @relation(fields: [userId], references: [id])
    userId String @unique // as buyer
}

model PreOrder {
    id String @id @default(uuid())
    // customer      Customer  @relation(fields: [customerId], references: [id])
    // customerId    Int

    quantity      Int /// @zod.number.min(1)
    priceNormal   Int /// @zod.number.min(1)
    priceSell     Int /// @zod.number.min(1)
    estimatedDate DateTime? //@default(now())
    expired       DateTime?
    status String /// @zod.string.min(1) // Pending, Terima

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User      User    @relation(fields: [userId], references: [id])
    userId    String
    product   Product @relation(fields: [productId], references: [id])
    productId String
}

model Sale {
    id    String   @id @default(uuid())
    date  DateTime
    total Int /// @zod.number.min(1)
    items Int /// @zod.number.min(1)

    /// @zod.string.min(1)
    statusTransaction String //@default("Pending") // Pending , Accept

    /// @zod.string.min(1)
    typeTransaction String //@default("Cash") // Cash, Transfer
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    SaleItems        SalesItem[]
    User             User?       @relation(fields: [seller_userId], references: [id])
    /// @zod.string.nullable();
    seller_userId    String? // employee or admin
    customer         Customer    @relation(fields: [buyer_customerId], references: [id])
    buyer_customerId String // buyer
}

model SalesItem {
    id String @id @default(uuid())
    quantity   Int /// @zod.number.min(1)
    priceAtBuy Int /// @zod.number.min(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    product   Product @relation(fields: [productId], references: [id])
    productId String
    sale      Sale    @relation(fields: [saleId], references: [id])
    saleId    String
}

// model MemberTier {
//     id       Int    @id @default(autoincrement())
//     name     String /// @zod.string.min(1)
//     range    String /// @zod.string.min(1)
//     progress Int /// @zod.number.min(1)
//     count    Int /// @zod.number.min(1)
//
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model Shop {
    id       String @id @default(uuid())
    name     String
    location String
    category String
    open     Boolean
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id        String   @id @default(uuid())
    name      String /// @zod.string.min(1)
    email     String   @unique
    password  String /// @zod.string.min(1)
    role      String   @default("USER") /// @zod.string.min(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Sale     Sale[]
    PreOrder PreOrder[]
    Customer Customer? // as buyer
}

model Store {
    id          String   @id @default(uuid())
    name        String /// @zod.string.min(1)
    currency    String /// @zod.string.min(1)
    description String /// @zod.string.min(1)
    phone       String /// @zod.string.min(1)
    address     String /// @zod.string.min(1)
    email       String   @unique /// @zod.string.email().min(1)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model PaymentSetting {
    id          String              @id @default(uuid())
    isCod       Boolean             @default(false)
    isTax       Boolean             @default(false)
    valueCod    Int                 @default(0) /// @zod.number.min(0)
    valueTax    Int                 @default(0) /// @zod.number.min(0)
    PaymentList PaymentSettingList[]
}

model PaymentSettingList {
    id      String          @id @default(uuid())
    title     String /// @zod.string.min(1)
    value     String /// @zod.string.min(1)
    fee       Int /// @zod.number.min(0)
    Payment PaymentSetting? @relation(fields: [paymentId], references: [id])
    paymentId String?
}

model InventorySetting {
    id                String  @id @default(uuid())
    trackInventory    Boolean
    lowStockThreshold Int /// @zod.number.min(0)
    allowBackorders   Boolean
    autoReorder       Boolean
}

model ShippingSetting {
    id           String               @id @default(uuid())
    freeShippingThreshold Int /// @zod.number.min(0)
    handlingFee           Int /// @zod.number.min(0)
    internationalShipping Boolean
    internationalRate     Int /// @zod.number.min(0)
    ShippingList ShippingSettingList[]
}

model ShippingSettingList {
    id       String           @id @default(uuid())
    name       String /// @zod.string.min(1)
    price      Int /// @zod.number.min(0)
    rates      Int /// @zod.number.min(0)
    Shipping ShippingSetting? @relation(fields: [shippingId], references: [id])
    shippingId String?
}
